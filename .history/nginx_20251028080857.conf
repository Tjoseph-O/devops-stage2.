events {
    worker_connections 1024;
}

http {
    # Define upstream backend with primary/backup configuration
    upstream backend {
        # Primary server (Blue) - will serve traffic normally
        server app_blue:3000 max_fails=2 fail_timeout=5s;
        
        # Backup server (Green) - only receives traffic when primary fails
        server app_green:3000 backup;
    }

    server {
        listen 80;
        
        # Disable access log for better performance
        access_log off;
        error_log /var/log/nginx/error.log warn;

        location / {
            proxy_pass http://backend;
            
            # Fast failure detection - tight timeouts
            proxy_connect_timeout 2s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            
            # Retry on errors, timeouts, and 5xx responses
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
            
            # Forward all headers from upstream
            proxy_pass_request_headers on;
            
            # Set headers for upstream
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Don't buffer responses (for real-time failover)
            proxy_buffering off;
        }
        
        location /healthz {
            proxy_pass http://backend/healthz;
            proxy_connect_timeout 1s;
            proxy_read_timeout 1s;
        }
    }
}